CREDITS: Geeks-for-Geeks

We can have three cases to analyze an algorithm:
1) Worst Case
2) Average Case
3) Best Case



Worst Case Analysis (Usually Done)
In the worst case analysis, we calculate upper bound on running time of an algorithm.
We must know the case that causes maximum number of operations to be executed.
For Linear Search, the worst case happens when the element to be searched
is not present in the array. When x is not present, the search() functions
compares it with all the elements of array[] one by one. Therefore, the worst
case time complexity of linear search would be Θ(n).



Average Case Analysis (Sometimes done)
In average case analysis, we take all possible inputs and calculate computing
time for all of the inputs. Sum all the calculated values and divide the sum
by total number of inputs. We must know (or predict) distribution of cases.
For the linear search problem, let us assume that all cases are uniformly
distributed. So we sum all the cases and divide the sum by (n+1).



Best Case Analysis (Bogus)
In the best case analysis, we calculate lower bound on running time of an algorithm.
We must know the case that causes minimum number of operations to be executed.
In the linear search problem, the best case occurs when x is present at the first location.
The number of operations in the best case is constant (not dependent on n).
So time complexity in the best case would be Θ(1).




USE-CASES:
1. Worst-case Analysis: Most of the times, we do worst case analysis to analyze algorithms.
   In the worst analysis, we guarantee an upper bound on the running time of an
   algorithm which is good information.

2. Average-case Analysis: The average case analysis is not easy to do in most of the
   practical cases and it is rarely done. In the average case analysis,
   we must know (or predict) the mathematical distribution of all possible inputs.

3. Best-case Analysis: The Best Case analysis is bogus. Guaranteeing a lower
   bound on an algorithm doesn’t provide any information as in the worst case,
   an algorithm may take years to run.
