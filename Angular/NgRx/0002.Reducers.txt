// NEW SYNTAX
import { Action, createReducer, on } from '@ngrx/store';
import { User } from '../user.model';
import * as AuthActions from './auth.actions';

export interface State {
    user: User;
    authError: string;
    loading: boolean;
}
const initialState: State = {
    user: null,
    authError: null,
    loading: false
};

const _reducer = createReducer(
    initialState,
    on(AuthActions.loginStart, AuthActions.signupStart, state => {
        // DO SOMETHING
    }),
    on(AuthActions.authenticateSuccess, (state, action) => {
        // DO SOMETHING
    }),
    on(AuthActions.authenticateFail, (state, action) => {
        // DO SOMETHING
    })
);

export function componentNameReducer(authState: State | undefined, authAction: Action) {
  return _reducer(authState, authAction);
}



// OLD SYNTAX

// Each component that will want to change the state will create its own reducer.
//
// Name: component-name/store/component-name.reducer.ts

    import * as ComponentNameActions from './component-name.action.ts';

    export interface State {
      ...
    }

    const intialState: State = {
        // data
    };

    export function componentNameReducer(
        state: State = intialState,
        action: ComponentNameActions.ComponentNameActions
    ) {
        switch (action.type) {
            case ComponentNameActions.SOME_ACTION:
                // Do something
                return {
                    ...state,
                    someKey: [ ...state.someKey, action.payload ]
                };
            case ComponentNameActions.SOME_ACTION_2:
                // Do something
                return {
                    ...state,
                    someKey: [ ...state.someKey, action.payload ]
                }

            // Default statement is mandate for the initial getState
            default:
                return state;
        }
    }
