In any route, we can add a sibling property to 'path' and 'component', named 'canActivate', and assign
it an array. To that array, we can pass classes, that implement 'CanActivate' and because of this,
they will have implemented a method, 'canActivate' which returns Observable<boolean> | Promise<boolean> | boolean.
If all the classes return 'true', then the 'component' of that route is rendered. 'false' returns are
not handled here. The class that fails to return 'true' upon calling of canActivate(), should handle
the failing case. One way to handle failing case is to redirect to some other route.

NOTE: When a route is hit by a user, then all these class' 'canActivate()' method is called first.
 	  So, this is sort of a middleware, that executes before rendering a component for a route.


import {
	CanActivate,
	ActivatedRouteSnapshot,
	RouterStateSnapshot,
	Router
} from '@angular/router';

import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';

@Injectable()
export class AuthGuard implements CanActivate {
	constructor(private authService: AuthService,  // Our auth service that has a method, isAuthenticated()
												   // which returns a Promise, which when called, resolves
												   // with a boolean value. (Don't forget to add it
												   // to the providers array in the app.module.ts so
												   // that, Angular can inject it in this )
				private router: Router) {}

	canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) :
									Observable<boolean> | Promise<boolean> | boolean {
		return this.authService.isAuthenticated()
				   .then(
				   		(isAuthenticated: boolean) => {
							if (isAuthenticated) {
								return true;
							}
							this.router.navigate(['/']);
						}
				   )
	}
}
