In any route, we can add a sibling property to 'path' and 'component', named 'canActivate', and assign
it an array. To that array, we can pass classes, that implement 'CanActivate' and because of this,
they will have implemented a method, 'canActivate' which returns Observable<boolean> or Promise<boolean> or boolean.
If all the classes return 'true', then the 'component' of that route is rendered. 'false' returns are
not handled here. The class that fails to return 'true' upon calling of canActivate(), should handle
the failing case. One way to handle failing case is to redirect to some other route.

NOTE: When a route is hit by a user, then all these class' 'canActivate()' method is called first.
 	  So, this is sort of a middleware, that executes before rendering a component for a route.

NOTE: If we add a 'canActivate' property to a route, then all its children routes will also acquire
	  this property. There is another property, named 'canActivateChild', which behaves exactly the
	  same way as 'canActivate' but the only difference is that, if used on a route, only its children
	  routes will have these 'classes' run before rendering the component for that route. Also, the
	  array assigned to 'canActivateChild' accepts classes that implement 'CanActivateChild' and have
	  a method: 'canActivateChild', implemented by that class that returns Observable<boolean> or
	  Promise<boolean> or boolean.


// Below is an example of a class that can be used as a middleware.
import {
	CanActivate,
	ActivatedRouteSnapshot,
	RouterStateSnapshot,
	Router
} from '@angular/router';

import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';
import { UrlTree } from '@angular/router';

@Injectable()
export class AuthGuard implements CanActivate {
	constructor(private authService: AuthService,  // Our auth service that has a method, isAuthenticated()
												   // which returns a Promise, which when called, resolves
												   // with a boolean value. (Don't forget to add it
												   // to the providers array in the app.module.ts so
												   // that, Angular can inject it in this )
				private router: Router) {}

	canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) :
									Observable<boolean | UrlTree> |
									Promise<boolean | UrlTree> | boolean | UrlTree {
		return this.authService.isAuthenticated()
				   .then(
				   		(isAuthenticated: boolean) => {
							if (isAuthenticated) {
								return true;
							}
							this.router.navigate(['/']);
						}
				   )
	}
}

NOTE: We can ever return a URL tree so that it is redirected to some other URL if some condition is
	  not met.

	  // Example
	  	return this.router.createUrlTree(['/users', 'login']);
