In any route, we can add a sibling property to 'path' and 'component', named 'canActivate', and assign
it an array. To that array, we can pass classes, that implement 'CanActivate' and because of this,
they will have implemented a method, 'canActivate' which returns Observable<boolean> or Promise<boolean> or boolean.
If all the classes return 'true', then the 'component' of that route is rendered. 'false' returns are
not handled here. The class that fails to return 'true' upon calling of canActivate(), should handle
the failing case. One way to handle failing case is to redirect to some other route.

NOTE: When a route is hit by a user, then all these class' 'canActivate()' method is called first.
 	  So, this is sort of a middleware, that executes before rendering a component for a route.

NOTE: If we add a 'canActivate' property to a route, then all its children routes will also acquire
	  this property. There is another property, named 'canActivateChild', which behaves exactly the
	  same way as 'canActivate' but the only difference is that, if used on a route, only its children
	  routes will have these 'classes' run before rendering the component for that route. Also, the
	  array assigned to 'canActivateChild' accepts classes that implement 'CanActivateChild' and have
	  a method: 'canActivateChild', implemented by that class that returns Observable<boolean> or
	  Promise<boolean> or boolean.


// Below is an example of a class that can be used as a middleware.
import {
	CanActivate,
	ActivatedRouteSnapshot,
	RouterStateSnapshot,
	Router
} from '@angular/router';

import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';
import { UrlTree } from '@angular/router';

@Injectable()
export class AuthGuard implements CanActivate {
	constructor(private authService: AuthService,  // Our auth service that has a method, isAuthenticated()
												   // which returns a Promise, which when called, resolves
												   // with a boolean value. (Don't forget to add it
												   // to the providers array in the app.module.ts so
												   // that, Angular can inject it in this )
				private router: Router) {}

	canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) :
									Observable<boolean | UrlTree> |
									Promise<boolean | UrlTree> | boolean | UrlTree {
		return this.authService.isAuthenticated()
				   .then(
				   		(isAuthenticated: boolean) => {
							if (isAuthenticated) {
								return true;
							}
							this.router.navigate(['/']);
						}
				   )
	}
}

NOTE: We can even return a URL tree so that it is redirected to some other URL if some condition is
	  not met. This is the newer and recommended way to navigate the user to some other route by returning
	  the URL tree of the route instead of manually routing to that url as done above. Why? if there
	  are multiple guards, the guards run parallely (of course, not of different threads). If multiple guards fail
	  and they try to navigate the users away manually, it won't be predictable which guard's navigation will be
	  considered. If at some instance, guard one gets the http response (if it made any request) first, and it
	  decides to navigate away the user based on the response, it will navigate it first. Same thing with other guards.
	  So, to make the route guard navigation away, we return the URL trees from the guards. Before navigating the
	  user away, it first waits to resolve all the guards. Some of the guards returned the URL tree. To choose
	  the order of the URL tree, the one whose Guard appears before the Guards of other URL trees is chosen. So,
	  the array in which we provide the Guards, the order matters. Pass the guards in such an order that, the
	  left most guard has the highest priority of navigating the user away.

	  A child route guard is processed iff its parent has no canActivate guards or, all the canActivate guards
	  resolved to true.

	  // Example
	  	return this.router.createUrlTree(['/users', 'login']);
