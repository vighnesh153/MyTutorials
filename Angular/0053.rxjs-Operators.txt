Operators are basically some pure functions, that can be applied to a input to transform it to some
other form.

	import { map, filter } from 'rxjs/operators'


Usage:
	this.observer = someObservable()
						.pipe(
							map(data => 'Some Data: ' + data),
							filter(data => data.length > 10)
						)
						.subscribe(data => {
							console.log(data);
						});

	NOTE: 'pipe' method can take any number of operators. Those operators are applied linearly. What
		  I mean by that is first, the map is applied, and then filter is applied. Then, that transformed
		  data is passed as an argument to the function, passed as an argument to 'subscribe' method.


tap => This function is a rxjs operator. It takes a call back that does nothing to data but just
	   uses it to do something with the data. The callback passed to this function, doesn't need to
	   return anything because it will not be considered anyway.


take => This function is a rxjs operator. It takes a positive integer as an argument, and after
 		the subscriber has taken, that many number of values from the observable, it immediately
		unsubscribes the subscriber from the subscription.


withLatestFrom => This operator takes 1 value from the source observable (like Redux store)
					provided as an argument to it and then passes the data as an array from
					both the sources.

					const example = source.pipe(
					  withLatestFrom(secondSource),
					  map(([first, second]) => {
					    return `First Source (5s): ${first} Second Source (1s): ${second}`;
					  })
					);


exhaustMap => This function takes in callback. That callback should take the data of the subscription,
 			  as parameter and it returns an observable. This observable replaces the original observable.

		Example:
			this.someObservable
				.pipe(
					take(1),						// Operates on 'someObservable'
					exhaustMap(data => {
						return this.someOtherObservable;
					}),
					map(...),						// Operates on 'someOtherObservable'
					tap(...)						// Operates on 'someOtherObservable'
				)
