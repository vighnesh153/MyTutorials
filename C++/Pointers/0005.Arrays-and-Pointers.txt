int main() {
    int a[3];
    // 3 * sizeof(int) bytes of contiguous memory is allocated for the array 'a'.

    // 'a' also behaves like address of a[0].
    cout << a << endl;
    cout << &a[0] << endl;
    // The above outputs will be same.

    // So, we can access 0th element by the following ways:
    cout << a[0] << endl;
    cout << *a << endl;

    // To access ith element, we have the similar following ways:
    cout << a[i] << endl;
    cout << *(a + i) << endl;

    // Compiler behind the scenes, converts a[i] to *(a + i).
    // In fact, we can even use i[a] to get the ith element of the array 'a'.
    cout << 0[a] << endl;
    cout << 1[a] << endl;
    cout << 2[a] << endl;
    // But as you can see, it is confusing syntax and is not recommended.


    // NOTE: 'a' is not a pointer, but it behaves like one.
    int a[10];
    cout << sizeof(a);
    // Outputs: 10 * sizeof(int)
    // But a pointer's size is fixed. 4 bytes on a 32-bit machine and 8 bytes on a 64-bit machine.


    // So, unlike pointers, 'a' doesn't have a separate 8 bytes to store the address of array.
    // Hence, the following will always output the same:
    cout << a << endl;
    cout << a[0] << endl;
    cout << a + 0 << endl;

    int* p = a;
    cout << &a << endl;  // prints the same value as 'a' because as discussed above, no separate memory is allocated to store address of 'a'
    cout << &p << endl;  // prints the pointer's address

    // Also, we won't be able to reassign 'a' because 'a' doesn't have a separate memory.
    a = a + 1;  // Throws error


    // We cannot change the symbol table entry of any variable;
    // For eg.:
    int b = 10;
    &b = &b + 1;
    // It is not valid because we are trying to change the symbol table entry
    // of a variable. 'b' has already been assigned some address.

    // Although, we can create a variable that has the same address of that of another
    // variable, however, their 'type' should be same.
    int a = 10;
    int &c = a;
    // Now, 'c' and 'a' point to the same address (As discussed in the 'References' file).
}
