const express = require('express');
const app = express();

// .use() allows us to apply middleware.
// It takes a function that can accept 3 arguments: request, response and next.
// request and response are the usual arguments but next is the callback.
// When we are done with the processing of the middleware, we should invoke 'next'.
// If we don't, then the next applied middleware won't be executed.
// So, if we are not sending a response from within the middleware, then
// we should invoke the 'next' function.
app.use((request, response, next) => {
    // Do something
    next();  // Basically, the next middleware function that we added, is passed
             // passed as 'next'. So, we are the ones who indirectly invoke the next
             // middleware.
});

app.listen(4200);


// Adding more middlewares
app.use(middleware1, middleware2, middleware3, ...);    // directly add middlewares
app.use([middleware1, middleware2], middleware3,  [middleware4, middleware5],...); // add arrays of middlewares


NOTE: Now, express provides some widely used response methods.
    res.send('<h1>Hello</h1>');
    // It also sets the content-type to text/html by default (if it is not set by us).

    res.render('file');
    // Discussed later (in how to use templates)

    res.redirect('/');
    // This will redirect the user to the '/' route

    Other different type of response methods:
    https://expressjs.com/en/guide/routing.html#response-methods
