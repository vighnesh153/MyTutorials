Index of:
    The indexOf() method searches an array for an element value and returns its position.
    NOTE: Array.indexOf() returns -1 if the item is not found.
        var fruits = ["Apple", "Orange", "Apple", "Mango"];
        var a = fruits.indexOf("Apple");

    Syntax:
        arr.indexOf(item, start)
            item	Required. The item to search for.
            start	Optional. Where to start the search. Negative values will start at the given
                    position counting from the end, and search to the end.



Last Index of:
    arr.lastIndexOf() is the same as arr.indexOf(), but returns the position of the
    last occurrence of the specified element.



Converting Arrays to Strings
    The JavaScript method toString() converts an array to a string of (comma separated) array values.

    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits.toString();

    Output => Banana,Orange,Apple,Mango



JOIN:
    The join() method also joins all array elements into a string.
    It behaves just like toString(), but in addition you can specify the separator:

    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits.join(" * ");



The pop() method removes the last element from an array.
    The pop() method returns the value that was "popped out".

The push() method adds a new element to an array (at the end).
    The push() method returns the new array length.

The shift() method removes the first array element and "shifts" all other elements to a lower index.
    The shift() method returns the string that was "shifted out".

The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements.
    The unshift() method returns the new array length.




Splicing an Array:
    The splice() method can be used to add new items to an array:
        var fruits = ["Banana", "Orange", "Apple", "Mango"];
        fruits.splice(2, 0, "Lemon", "Kiwi");

    The first parameter (2) defines the position where new elements should be added (spliced in).
    The second parameter (0) defines how many elements should be removed.
    The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
    The splice() method returns an array with the deleted items.



Using splice() to Remove Elements
    With clever parameter setting, you can use splice() to remove elements without leaving "holes"
    in the array.
        var fruits = ["Banana", "Orange", "Apple", "Mango"];
        fruits.splice(0, 1);        // Removes the first element of fruits

    The first parameter (0) defines the position where new elements should be added (spliced in).
    The second parameter (1) defines how many elements should be removed.
    The rest of the parameters are omitted. No new elements will be added.



Merging (Concatenating) Arrays:
    var myGirls = ["Cecilie", "Lone"];
    var myBoys = ["Emil", "Tobias", "Linus"];
    var myChildren = myGirls.concat(myBoys);   // Concatenates (joins) myGirls and myBoys

    var arr1 = ["Cecilie", "Lone"];
    var arr2 = ["Emil", "Tobias", "Linus"];
    var arr3 = ["Robin", "Morgan"];
    var myChildren = arr1.concat(arr2, arr3);   // Concatenates arr1 with arr2 and arr3




Slicing an Array:
    The slice() method slices out a piece of an array into a new array.
        var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
        var citrus = fruits.slice(1);


    The slice() method can take two arguments like slice(1, 3).
    The method then selects elements from the start argument, and up to (but not including) the end argument.
        var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
        var citrus = fruits.slice(1, 3);
        // ["Orange", "Lemon"]
