"use strict"; Defines that JavaScript code should be executed in strict mode.


The "use strict" Directive
	The "use strict" directive was new in ECMAScript version 5.
	It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
	The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
	With strict mode, you can not, for example, use undeclared variables.
	All modern browsers support "use strict" except Internet Explorer 9 and lower.


NOTE: You can use strict mode in all your programs. It helps you to write cleaner code, like
	  preventing you from using undeclared variables.



Examples:
	1. "use strict";
		x = 3.14;       // This will cause an error because x is not declared


	2. "use strict";
		myFunction();

		function myFunction() {
		  	y = 3.14;   // This will also cause an error because y is not declared
		}



The "use strict"; Syntax
	The syntax, for declaring strict mode, was designed to be compatible with older versions of
	JavaScript. Compiling a numeric literal (4 + 5;) or a string literal ("John Doe";) in a
	JavaScript program has no side effects. It simply compiles to a non existing variable and dies.
	So "use strict"; only matters to new compilers that "understand" the meaning of it.


Why Strict Mode?
	Strict mode makes it easier to write "secure" JavaScript. Strict mode changes previously
	accepted "bad syntax" into real errors. As an example, in normal JavaScript, mistyping a
	variable name creates a new global variable. In strict mode, this will throw an error, making
	it impossible to accidentally create a global variable. In normal JavaScript, a developer will
	not receive any error feedback assigning values to non-writable properties.	In strict mode, any
	assignment to a non-writable property, a getter-only property, a non-existing property, a
	non-existing variable, or a non-existing object, will throw an error.
