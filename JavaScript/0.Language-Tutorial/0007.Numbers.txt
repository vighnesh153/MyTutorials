JavaScript has only one type of number. Numbers can be written with or without decimals.

	var x = 3.14;    // A number with decimals
	var y = 3;       // A number without decimals



Extra large or extra small numbers can be written with scientific (exponent) notation:

	var x = 123e5;    // 12300000
	var y = 123e-5;   // 0.00123



JavaScript Numbers are Always 64-bit Floating Point:
	1. number (the fraction) is stored in bits 0 to 51
	2. exponent in bits 52 to 62
	3. sign in bit 63



PRECISION
	Integers (numbers without a period or exponent notation) are accurate up to 15 digits.
		var x = 999999999999999;   // x will be 999999999999999
		var y = 9999999999999999;  // y will be 10000000000000000



The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:
	var x = 0.2 + 0.1;         // x will be 0.30000000000000004
To solve the problem above, it helps to multiply and divide:
	var x = (0.2 * 10 + 0.1 * 10) / 10;



NaN - Not a Number
	NaN is a JavaScript reserved word indicating that a number is not a legal number.
	Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number).

		1. var x = 100 / "Apple";  // x will be NaN (Not a Number)

		2. var x = 100 / "Apple";
		   isNaN(x);



Infinity
	1. var myNumber = 2;
	   while (myNumber != Infinity) {   // Execute until Infinity
	   	   myNumber = myNumber * myNumber;
	   }

	2. var x =  2 / 0;       // x will be Infinity
	   var y = -2 / 0;       // y will be -Infinity


Hexadecimal
	var x = 0xFF;        // x will be 255



Base
	By default, JavaScript displays numbers as base 10 decimals.
	But you can use the toString() method to output numbers from base 2 to base 36.
	Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.

		var myNumber = 32;
		myNumber.toString(10);  // returns "32"
		myNumber.toString(32);  // returns "10"
		myNumber.toString(16);  // returns "20"
		myNumber.toString(8);   // returns "40"
		myNumber.toString(2);   // returns "100000"



PROPERTIES of the Number object:
	1. Number.EPSILON
		represents the difference between 1 and the smallest floating point number greater than 1.

	2. Number.MAX_SAFE_INTEGER
		represents the maximum safe integer in JavaScript (2^53 - 1).

	3. Number.MAX_VALUE
		represents the maximum numeric value representable in JavaScript.

	4. Number.MIN_VALUE
		represents the smallest positive numeric value representable in JavaScript.

	5. Number.MIN_SAFE_INTEGER
		represents the minimum safe integer in JavaScript (-(2^53 - 1)).

	6. Number.NEGATIVE_INFINITY
		represents the negative Infinity value
		example: -Number.MAX_VALUE * 2

	7. Number.POSITIVE_INFINITY
		represents the positive Infinity value
		example: Number.MAX_VALUE * 2

	8. Number.NaN
		represents Not-A-Number. Equivalent of NaN.
