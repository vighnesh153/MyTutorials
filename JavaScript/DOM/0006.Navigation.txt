With the HTML DOM, you can navigate the node tree using node relationships.

NODE RELATIONSHIPS
	The nodes in the node tree have a hierarchical relationship to each other.
	The terms parent, child, and sibling are used to describe the relationships.

	In a node tree, the top node is called the root (or root node)
		1. Every node has exactly one parent, except the root (which has no parent)
		2. A node can have a number of children
		3. Siblings (brothers or sisters) are nodes with the same parent


COMMON RELATIONSHIPS
		<html> is the root node
		<html> has no parents
		<html> is the parent of <head> and <body>
		<head> is the first child of <html>
		<body> is the last child of <html>


NAVIGATING BETWEEN NODES
You can use the following node properties to navigate between nodes with JavaScript:
		parentNode
		childNodes[nodenumber]
		firstChild
		lastChild
		nextSibling
		previousSibling


NOTE: A common error in DOM processing is to expect an element node to contain text.


Example:
	<title id="demo">DOM Tutorial</title>

	var myTitle = document.getElementById("demo").innerHTML;
	OR
	var myTitle = document.getElementById("demo").firstChild.nodeValue;
	OR
	var myTitle = document.getElementById("demo").childNodes[0].nodeValue;


	document.getElementById("demo").nodeName  // title
	NOTE: nodeName always contains the uppercase tag name of an HTML element.


THE NODEVALUE PROPERTY
The nodeValue property specifies the value of a node.
	nodeValue for element nodes is null
	nodeValue for text nodes is the text itself
	nodeValue for attribute nodes is the attribute value


EXAMPLES:

1.  CREATING NEW HTML ELEMENTS (NODES)
	<div id="div1">
	  <p id="p1">This is a paragraph.</p>
	  <p id="p2">This is another paragraph.</p>
	</div>

	<script>
		var para = document.createElement("p");
		var node = document.createTextNode("This is new.");
		para.appendChild(node);

		var element = document.getElementById("div1");
		element.appendChild(para);
	</script>


2. CREATING NEW HTML ELEMENTS - INSERTBEFORE()
	<div id="div1">
	  <p id="p1">This is a paragraph.</p>
	  <p id="p2">This is another paragraph.</p>
	</div>

	<script>
		var para = document.createElement("p");
		var node = document.createTextNode("This is new.");
		para.appendChild(node);

		var element = document.getElementById("div1");
		var child = document.getElementById("p1");
		element.insertBefore(para, child);
	</script>

3. REMOVING EXISTING HTML ELEMENTS
	<div id="div1">
	  <p id="p1">This is a paragraph.</p>
	  <p id="p2">This is another paragraph.</p>
	</div>

	<script>
		var parent = document.getElementById("div1");
		var child = document.getElementById("p1");
		parent.removeChild(child);
	</script>
NOTE: The node.remove() method does not work in older versions of the Internet Explorer browser.

4. Replacing HTML Elements
	<div id="div1">
	  <p id="p1">This is a paragraph.</p>
	  <p id="p2">This is another paragraph.</p>
	</div>

	<script>
		var para = document.createElement("p");
		var node = document.createTextNode("This is new.");
		para.appendChild(node);

		var parent = document.getElementById("div1");
		var child = document.getElementById("p1");
		parent.replaceChild(para, child);
	</script>
