Check the following link:
    https://reactjs.org/docs/handling-events.html


NOTE: You have to be careful about the meaning of this in JSX callbacks. In JavaScript, class
      methods are not bound by default. If you forget to bind this.handleClick and pass it to
      onClick, this will be undefined when the function is actually called. This is not
      React-specific behavior; it is a part of how functions work in JavaScript. Generally, if you
      refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.


Similar example, with little variant:
    <Hello name={ this.state.name } onClick={ this.changeName.bind(this) }/>

Or do the following:
    <button onClick={(e) => this.handleClick(e)}>


DIFFERENT TYPES OF SUPPORTED EVENTS:
    https://reactjs.org/docs/events.html#supported-events


NOTE:
    To avoid conflicts with the 'this' keyword in the handling of the events, use arrow functions:

        someEventHandler = (e) => {
            // Handle event
        };

        <button onClick={this.handleClick}>

     This way, we can also access 'this' in the event handler without any worries.
