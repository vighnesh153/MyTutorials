Lifecycle methods are special methods on the Component class that run some
code when a component mounts or unmounts. Below are the normal methods and lifecycle methods
called in order.

Component Creation Lifecycle:

    1. constructor() { } => This method runs as soon as the component is is initialised.
            constructor(props) {
                super(props);
                this.state = {}; // we can also initialise state here
            }
            // this is the default template of the constructor. If we want to add some
            // functionality in the constructor, we need to add this bit of code as well.

    2. static getDerievedStateFromProps(props, state) {}
            // Should be very rarely used. It is used to update state based on props.
            // But it is not usually used. Because we can do this in the constructor as well.
            // It is also called when props from parent component are changed. To handle that, we can do something else
            // which is discussed in Component Updation Lifecycle.

    // componentWillMount() {}  // This is also not needed that much and will be removed in future.

    3. render() {}

    4. render child components and all their lifecycle components

    5. componentDidMount() {}  => View has been initialised in the DOM.



Component Updation Lifecycle:

    1. getDerievedStateFromProps(props, state) {}

    2. shouldComponentUpdate(nextProps, nextState) {}
        // We decide here whether react should run an update cycle or not.

    3. render() {}

    4. Update Child Component Props

    5. getSnapshotBeforeUpdate(prevProps, prevState) {}

    6. componentDidUpdate() {} 
