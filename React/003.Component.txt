DISCLAIMER: NO NEED TO TRY THIS.THIS IS JUST TO SEE HOW EASY IT IS TO CREATE BASIC COMPONENTS.

NOTE: We capitalize custom components to differentiate them from regular HTML
	  elements.
NOTE: Components created using functions are simple component. They don't need
	  power of classes because they have simple functionality. So, if you need
	  a component that doesn't need 'state' or complex functionality, you may
	  prefer function Component for that case (Because using class would be an
	  overkill).
NOTE: Create function-based components using ES6 arrow syntax to avoid binding
	  'this' to the function (Because, if we use 'this' inside a function declared
	  using the 'function' keyword, then 'this' will be bound to itself.
	  Whereas, if we use 'this' inside a function declared using the arrow syntax,
	  then the 'this' will be bound to the enclosing entity).

To create a component:

1.
// 'props' argument will hold the key-value pairs passed in the element
import React from 'react';
// We need 'React' to render or understand jsx (html-like code)
function Person(props) {
	return (
	<div className="person">
		// 'className' is used instead of 'class' because 'class' is a keyword.
		<h1>Name: { props.name }</h1>
		<p>Age: { props.age }</p>
	</div>
	);
}

2.
import React, { Component } from 'react';
// We need 'React' to render or understand jsx (html-like code)
class Person extends Component {
  render() {
    return (
      <div className="person">
		  <h1>Name: { this.props.name }</h1>
		  <p>Age: { this.props.age }</p>
	  </div>
    );
  }
}


Usage:
// wrap all components in a container parent
let appContents = (
	<div>
		<Person name="Max" age="28" />
		<Person name="Manu" age="29" />
	</div>
);

// Fills the element, with id='app', with the contents of 'appContents'
ReactDOM.render(app, document.querySelector('#app'));




HTML file:
<div id="app"></div>
<style>
	.person {
		display: inline-block;
		margin: 10px;
		border: 1px solid #eee;
		box-shadow: 0 2px 2px #ccc;
		width: 200px;
		padding: 20px;
	}
</style>
