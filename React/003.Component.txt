DISCLAIMER: NO NEED TO TRY THIS.THIS IS JUST TO SEE HOW EASY IT IS TO CREATE BASIC COMPONENTS.

NOTE: Always start component names with a capital letter. React treats
	  components starting with lowercase letters as DOM tags. For example, <div />
	  represents an HTML div tag, but <Welcome /> represents a component and requires
	  'Welcome' to be in scope.

NOTE: Components created using functions are simple component. They don't need
	  power of classes because they have simple functionality. So, if you need
	  a component that doesn't need 'state' or complex functionality, you may
	  prefer function Component for that case (Because using class would be an
	  overkill).
NOTE: Create function-based components using ES6 arrow syntax to avoid binding
	  'this' to the function (Because, if we use 'this' inside a function declared
	  using the 'function' keyword, then 'this' will be bound to itself.
	  Whereas, if we use 'this' inside a function declared using the arrow syntax,
	  then the 'this' will be bound to the enclosing entity).

NOTE: Pure functions are those that don't change their inputs, and always
	  return the same result for the same inputs. All React components must act
	  like pure functions with respect to their props. Of course, application
	  UIs are dynamic and change over time. Here comes the need for "state".
	  State allows React components to change their output over time in
	  response to user actions, network responses, and anything else, without
	  violating this rule.

To create a component:

1.
// 'props' argument will hold the key-value pairs passed in the element
import React from 'react';
// We need 'React' to render or understand jsx (html-like code)
function Person(props) {
	return (
	<div className="person">
		// 'className' is used instead of 'class' because 'class' is a keyword.
		<h1>Name: { props.name }</h1>
		<p>Age: { props.age }</p>
	</div>
	);
}

2.
import React, { Component } from 'react';
// We need 'React' to render or understand jsx (html-like code)
class Person extends Component {
  render() {
    return (
      <div className="person">
		  <h1>Name: { this.props.name }</h1>
		  <p>Age: { this.props.age }</p>
	  </div>
    );
  }
}


Usage:
// wrap all components in a container parent
let appContents = (
	<div>
		<Person name="Max" age="28" />
		<Person name="Manu" age="29" />
	</div>
);

// Fills the element, with id='app', with the contents of 'appContents'
ReactDOM.render(app, document.querySelector('#app'));




HTML file:
<div id="app"></div>
<style>
	.person {
		display: inline-block;
		margin: 10px;
		border: 1px solid #eee;
		box-shadow: 0 2px 2px #ccc;
		width: 200px;
		padding: 20px;
	}
</style>
