SET UP GIT ON LINUX

1. Run "apt install git"
2. Set username: git config --global user.name "vighnesh153"
3. Set email: git config --global user.email "vighnesh.raut13@gmail.com"



CREATING A GIT REPOSITORY

1. Create a repository on git.
2. Create a folder with same name as the repository.
3. Open terminal from within the folder or in the terminal, head to inside the created folder.
4. Run the generated git commands from github.

       (OR)
   Run "git init; git remote add origin https://github.com/vighnesh153/REPOSITORYname.git"


   // git init : initialize git in a repository. It basically tells git to start tracking contents of the folder for changes.



NOW TO ADD TO GITHUB REPOSITORY

1. Run "git add filename". If have multiple files, then run "git add .".
   
   // git add file : tells git to track what files

2. Then run, 'git commit -m "commit message" '.

   -> It saves the changes made to files, added to be tracked, in the log file in .git/ folder as commit id, author, date and message.
   -> On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. 
   -> Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.

3. Then, "git push -u origin master".



CLONING THE REPOSITORY

1. Create folder for pulling.
2. Run "git clone clone_url"
3. Done. Clone created.



TO PULL FROM THE GIT REPOSITORY (to the master branch)

1. Run "git pull origin master" from within the folder.



BASICS GIT COMMANDS

1. git status : shows status of files, whether they are being tracked or not.
2. git log : Shows all the commits from the time they were made. 
   
	FORMAT: commit 234bsjkdhbfkj4225e4lkjnlkj23n4
		author: Vighnesh(vighnesh.raut13@gmail.com)
		Date: 24th Oct, 2018   10:46am  +530
			
			message_1

		commit asf3242fdsfkj4225e4lkjnlkj23n4
		author: Vighnesh(vighnesh.raut13@gmail.com)
		Date: 24th Oct, 2018   10:46am  +530
			
			message_2
		
3. git checkout commit-id : eg., git checkout 24jbn24i3b23kjbnn324
	-> Changes the current files to that commit which matches the commit ID. Files, not existing in that version, will also be removed.

	ORIGINAL	
		
					      HEAD
		0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0
					      MASTER

	AFTER CHECKOUT


		     HEAD
		0 -> 0 -> 0 -> 0 -> 0 -> 0 -> 0
					      MASTER

	// HEAD is the timeline or version pointer
	// MASTER is the ponter to the version that is being used by the owner. It usually points to the most recent commit.

4. git checkout master : Make the HEAD point back to the master.
5. git revert --no-commit commitID..HEAD : eg., git revert --no-commit 13kjn3kjb42jkln4mlkmklsdfdsfsfd..HEAD

	// Removes all the commits from where the HEAD is pointing till the commit id provided. In the above eg., 
		from commit: 13kjn3kjb42jkln4mlkmklsdfdsfsfd
		to commit: HEAD
	// It basically reverts back to a previous version														
	// After reverting back to a version, we must save the changes.
		git commit -m "Reverting to a previous version"

	
	// git log : has all the commits saved.
	// So, even if we revert to some other version, we still can have all our data from a next version, from where we reverted back, 
	    through git checkout, as before reverting, we committed that version.
6. git checkout -b branch-name

	// -b for new branch
	// creates new branch with given name and starts to use it for current modifications to the project.
	// we use "git push origin branch-name"
	// and "git pull origin branch-name" for pushing and pulling to a specific branch


// GITHUB knowledge
1. Branch : Branching is the way to work on different versions of a repository at one time. 
            -> By default your repository has one branch named master which is considered to be the definitive branch. 
            -> We use branches to experiment and make edits before committing them to master.
	    -> When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. 
	    -> If someone else made changes to the master branch while you were working on your branch, you could pull in those updates using "git pull"

2. Create a Branch:
	-> Go to your new repository hello-world.
	-> Click the drop down at the top of the file list that says branch: master.
	-> Type a branch name, readme-edits, into the new branch text box.
	-> Select the blue Create branch box or hit “Enter” on your keyboard.
	
	Now you have two branches, master and readme-edits. 
	They look exactly the same, but not for long! Next we’ll add our changes to the new branch.


3. Opening a Pull Request:
	-> When you open a pull request,
	   you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch.
	-> Pull requests show diffs, or differences, of the content from both branches.
	-> The changes, additions, and subtractions are shown in green and red.
	-> Steps:
	     => Click the Pull Request tab, then from the Pull Request page, click the green New pull request button.
	     => Select the branch you made, readme-edits, to compare with master (the original).  (Check the order as new versions have diff. order)
	     => Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.
	     => When you’re satisfied that these are the changes you want to submit, click the big green Create Pull Request button.
	     => By using GitHub's @mention system in your Pull Request message, 
		you can ask for feedback from specific people or teams, whether they're down the hall or ten time zones away.
	     => Give your pull request a title and write a brief description of your changes.
	     => When you’re done with your message, click Create pull request!
	-> Two different types of Pulls:
	     => Fork & Pull Model
	     => Shared repository model

4. Deploy:
	-> With GitHub, you can deploy from a branch for final testing in production before merging to master.
	-> Once your pull request has been reviewed and the branch passes your tests, you can deploy your changes to verify them in production. 
	-> If your branch causes issues, you can roll it back by deploying the existing master into production.


5. Merging a pull request:
	-> In this final step, it’s time to bring your changes together – merging your readme-edits branch into the master branch.
	-> Click the green Merge pull request button to merge the changes into master.
	-> Click Confirm merge.
	-> Go ahead and delete the branch, since its changes have been incorporated, with the Delete branch button in the purple box.


6. Pushing to another branch:
	-> git push -u origin BranchName
	       // In some cases -u showed as invalid argument, so use this
	-> git push origin BranchName


7. Creating an organization:
	-> It is like creating a new github account where you can add different repositories, projects.
	-> The owner can add members to the organization.
	-> The owner can set previledges for different members for each repo or project in that organization.
	-> Teams: they are a group of members. The owner can set previledges for teams to grant them permissions for various tasks.
	-> Using Teams made it easy for the owner to set the permissions for members. Before teams, owner had to set permissions for every user.
	   Now, he can just create a Team, add members to it, and then set permissions for the Team. Those permissions apply for every Team member of that Team.

	-> Creating an organizations is similar to creating a repository. Head over to the + symbol, then select "New Organization", then follow the rest GUI.
	
