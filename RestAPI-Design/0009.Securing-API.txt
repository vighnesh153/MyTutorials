Locking down the API:
	1. APIs and Security
	2. Cross Domain Security
	3. Authentication/Authorization
	4. Security considerations during design
	5. Types of API Security


APIs and Security:
	When to use security for an API:
		1. when using private and personalized data
		2. when sending sensitive data across the 'wire'
		3. when using credentials of any kind
		4. when trying to protect against overuse of our servers
	Protect our API:
		1. Server Infrastructure Security(Hardware and all)
			- Should be taken care by the Web Service provider
		2. Secure In-Transit
			- SSL is almost always appropriate
			- Cost of SSL is worth the expense
		3. Secure the API itself
			- Cross Origin Security
			- Authentication/Authorization


Cross Domain Security:
	CORS => Cross-origin resource sharing
	This is something that is done by the browser.

	Whenever a resource is being accessed by the browser(like bootstrap CDN, etc., etc.),
	it requests access from the server that is serving it. Then server replies with some
	rules. Those rules have some Access-Control-Allow-Methods like GET, POST, OPTIONS, etc.

	If whatever we are requesting, has a Request-Method-Type that is allowed in the rules,
	then the browser issues request to the server with CORS header which has the Access-type or
	Request-Method-Type. If the Request-Method-Type is not in the allowed rules, then the
	browser issues a CORS error in the JavaScript console and doesn't make a request to the
	server.



Authentication versus Authorization:
	Authentication:
		Who you are
		Information to determine identity
		Credentials/Claims

	Authorization:
		What you can do
		Roles, Rights

	Authentication types:
		Using Cookies (request-forgery possibility)(very insecure)
		Basic Authentication(sends credentials on every request -> increases area of attacks) (very insecure)
		Token Authentication (should expire faster than cookies, max 20 min)(secure and simple and common)
			examples: JSON Web Token (JWTs)
		OAuth (Uses third party to identify)
