In C#,

public abstract class Animal {
    public abstract void Talk();
}

public class Dog : Animal {
    private const string Introduction = "I am a Dog class.";
    public override void Talk() {
        System.Console.WriteLine(Introduction);
    }
}

public class Cat : Animal {
    private const string Summary = "I am a Cat class.";
    public override void Talk() {
        System.Console.WriteLine(Summary);
    }
}

public static class AnimalFactory {
	private static readonly Dictionary<string, Animal> StringToAnimal = new Dictionary<string, Animal> {
		{"dog", new Dog()},
		{"cat", new Cat()},
	};

    public static Animal GetInstance(string type) {
		// add some exception handling. Maybe throw a custom exception saying 'Animal of that type is not available'.
        return stringToAnimal[type];
    }
}

class Program {
    private static void Main(string[] args) {
        AnimalFactory.GetInstance("dog").Talk();
        AnimalFactory.GetInstance("cat").Talk();
    }
}
